{"version":3,"sources":["components/WeatherCard.js","assets/left-arrow.svg","assets/right-arrow.svg","types/index.js","config/constants.js","actions/weather.js","components/CustomCarousel.js","components/CustomBarChart.js","components/StyledRadio.js","components/SearchButton.js","App.js","reportWebVitals.js","reducers/weather.js","reducers/loading.js","reducers/index.js","store/index.js","index.js"],"names":["useStyles","makeStyles","bullet","display","margin","transform","title","fontSize","pos","marginBottom","WeatherCard","description","date","temp","icon","isCels","customStyle","classes","useState","Math","round","temperature","setTemperature","useEffect","tempr","Card","className","variant","CardContent","Typography","color","gutterBottom","component","data-testid","src","alt","SET_WEATHER_DATA","SET_FIVE_DAYS_FORECAST","LOADING","SET_CELSIUS","SET_BARCHART_DATA","SET_CITY","API_URL","APP_ID","getWeatherData","city","dispatch","a","type","payload","axios","get","then","res","console","log","data","list","setFiveDaysData","catch","error","response","finally","sortBarChartData","weather","allData","chartData","weatherDatePart","dt_txt","split","forEach","element","dateParts","time","push","main","fiveData","forecast","includes","length","root","minWidth","marginRight","marginLeft","selectedRoot","borderWidth","borderColor","SampleNextArrow","props","style","onClick","RightArrow","position","right","top","SamplePrevArrow","LeftArrow","left","CustomCarousel","celsius","activeIndex","setActiveIndex","useDispatch","settings","dots","infinite","speed","slidesToShow","slidesToScroll","nextArrow","prevArrow","responsive","breakpoint","initialSlide","paddingLeft","paddingRight","slice","map","index","onSelected","moment","format","CustomBarChart","ResponsiveContainer","width","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","Tooltip","Legend","Bar","fill","backgroundColor","borderRadius","boxShadow","backgroundImage","outline","outlineOffset","background","checkedIcon","content","StyledRadio","Radio","disableRipple","clsx","SearchButton","withStyles","theme","palette","getContrastText","blue","Button","spacing","text","App","value","setValue","setCity","openDialog","setOpenDialog","isLoading","useSelector","state","loading","weatherData","fiveDaysData","isCelsius","barChartData","weatherCity","Container","CircularProgress","FormControl","RadioGroup","aria-label","name","onChange","event","target","flexDirection","FormControlLabel","control","label","Dialog","maxWidth","fullWidth","open","onClose","DialogContent","onSubmit","e","preventDefault","noValidate","autoComplete","TextField","id","DialogActions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","weatherReducer","loadingReducer","combineReducers","middlewares","thunk","logger","store","createStore","rootReducer","compose","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bd378ab.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"../App.css\";\n\nconst useStyles = makeStyles({\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst WeatherCard = ({ description, date, temp, icon, isCels, customStyle }) => {\n  const classes = useStyles();\n  const [temperature, setTemperature] = useState(Math.round(temp));\n\n  // calculate farenheit to celsius conversion on radio button switch\n  useEffect(() => {\n    if (isCels) {\n      let tempr = Math.round(temp);\n      let cels = (tempr - 30) / 2;\n      setTemperature(cels);\n    } else {\n      setTemperature(Math.round(temp));\n    }\n  }, [isCels]);\n\n\n  return (\n    <Card className={customStyle} variant=\"outlined\">\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Temperature\n        </Typography>\n        {isCels ? (\n          <Typography variant=\"h5\" component=\"h2\">\n            {temperature}° C\n          </Typography>\n        ) : (\n          <Typography variant=\"h5\" component=\"h2\" data-testid=\"temperature\">\n            {temperature}° F\n          </Typography>\n        )}\n        <Typography className={classes.pos} color=\"textSecondary\" data-testid=\"weather-date\">\n          {date}\n        </Typography>\n        <div className=\"info\">\n          <img\n            className=\"city-icon\"\n            src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\n            alt={description}\n            data-testid=\"icon\"\n          />\n          <Typography data-testid=\"description\" variant=\"body2\" component=\"p\">\n            {description}\n          </Typography>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default WeatherCard;\n","export default __webpack_public_path__ + \"static/media/left-arrow.6266a078.svg\";","export default __webpack_public_path__ + \"static/media/right-arrow.e4476856.svg\";","export const SET_WEATHER_DATA = \"SET_WEATHER_DATA\";\nexport const SET_FIVE_DAYS_FORECAST = \"SET_FIVE_DAYS_FORECAST\";\n\nexport const LOADING = \"LOADING\";\n\nexport const SET_CELSIUS = \"SET_CELSIUS\";\nexport const SET_BARCHART_DATA = \"SET_BARCHART_DATA\";\n\nexport const SET_CITY = \"SET_CITY\";","export const API_URL = \"https://api.openweathermap.org/data/2.5/forecast?q=\";\nexport const APP_ID = \"75f972b80e26f14fe6c920aa6a85ad57\";\n\nexport const mockedWeather = [\n  {\n    dt: 1628283600,\n    main: {\n      temp: 62.02,\n      feels_like: 61.41,\n      temp_min: 57.47,\n      temp_max: 62.02,\n      pressure: 1010,\n      sea_level: 1010,\n      grnd_level: 950,\n      humidity: 74,\n      temp_kf: 2.53,\n    },\n    weather: [\n      {\n        id: 803,\n        main: \"Clouds\",\n        description: \"broken clouds\",\n        icon: \"04n\",\n      },\n    ],\n    clouds: {\n      all: 61,\n    },\n    wind: {\n      speed: 2.46,\n      deg: 211,\n      gust: 2.46,\n    },\n    visibility: 10000,\n    pop: 0,\n    sys: {\n      pod: \"n\",\n    },\n    dt_txt: \"2021-08-06 21:00:00\",\n  },\n];\n","import axios from \"axios\";\nimport { API_URL, APP_ID } from \"../config/constants\";\nimport { LOADING, SET_FIVE_DAYS_FORECAST, SET_WEATHER_DATA, SET_BARCHART_DATA, SET_CITY } from \"../types\";\nimport { toast } from \"react-toastify\";\n\nexport const getWeatherData =\n  (city = \"Munich,de\") =>\n  async (dispatch) => {\n    dispatch({\n      type: LOADING,\n      payload: true,\n    });\n\n    dispatch({\n      type: SET_CITY,\n      payload: city,\n    });\n\n    await axios\n      .get(API_URL + city + \"&units=imperial&APPID=\" + APP_ID + \"&cnt=40\")\n      .then((res) => {\n        console.log(res.data);\n        dispatch({\n          type: SET_WEATHER_DATA,\n          payload: res.data.list,\n        });\n        setFiveDaysData(res.data.list, dispatch)\n        // alert(\"Weather data gotten successfully\");\n      })\n      .catch((error) => {\n        const message = error.response.data.error;\n        // alert(message);\n        // clear all data in redux state\n        dispatch({\n          type: SET_WEATHER_DATA,\n          payload: null,\n        });\n        dispatch({\n          type: SET_FIVE_DAYS_FORECAST,\n          payload: null\n        });\n        dispatch({\n          type: SET_BARCHART_DATA,\n          payload: null\n        });\n      })\n      .finally(() => {\n        dispatch({\n          type: LOADING,\n          payload: false,\n        });\n      });\n  };\n\nexport const sortBarChartData = (weather, allData) => (dispatch) => {\n  let chartData = [];\n  let weatherDate = weather.dt_txt;\n  let weatherDatePart = weatherDate.split(\" \");\n  allData.forEach((element) => {\n    let initialDate = element.dt_txt;\n    let dateParts = initialDate.split(\" \");\n    if (weatherDatePart[0] == dateParts[0]) {\n      let time = dateParts[1].split(':')\n      chartData.push({\n        date: time[0] + \":00\",\n        temp: element.main.temp\n      });\n    }\n  });\n  dispatch({\n    type: SET_BARCHART_DATA,\n    payload: chartData\n  });\n};\n\nconst setFiveDaysData = (data, dispatch) => {\n  let fiveData = [];\n  let forecast = [];\n  data.forEach(element => {\n    let initialDate = element.dt_txt;\n    let dateParts = initialDate.split(' ');\n    if(fiveData.includes(dateParts[0])){\n      // do nothing\n    } else {\n      fiveData.push(dateParts[0]);\n      forecast.push(element);\n    }\n  });\n\n  dispatch({\n    type: SET_FIVE_DAYS_FORECAST,\n    payload: forecast\n  });\n  console.log('five data: ' + fiveData.length);\n}\n","import React, { useState } from \"react\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport WeatherCard from \"./WeatherCard\";\nimport LeftArrow from \"../assets/left-arrow.svg\";\nimport RightArrow from \"../assets/right-arrow.svg\";\nimport \"../App.css\";\nimport moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch } from \"react-redux\";\nimport { SET_BARCHART_DATA } from \"../types\";\nimport { sortBarChartData } from \"../actions/weather\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 205,\n    marginRight: 5,\n    marginLeft: 5,\n    // width: 245,\n  },\n  selectedRoot: {\n    minWidth: 205,\n    marginRight: 5,\n    marginLeft: 5,\n    borderWidth: 5,\n    borderColor: \"#137cbd\",\n  },\n});\n\nfunction SampleNextArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <img\n      src={RightArrow}\n      alt=\"nextArrow\"\n      style={{ ...style, position: \"absolute\", right: 50, top: -50 }}\n      onClick={onClick}\n    />\n  );\n}\n\nfunction SamplePrevArrow(props) {\n  const { className, style, onClick } = props;\n  return (\n    <img\n      src={LeftArrow}\n      alt=\"prevArrow\"\n      style={{ ...style, position: \"absolute\", left: 50, top: -50 }}\n      onClick={onClick}\n    />\n  );\n}\n\nconst CustomCarousel = ({ data, celsius, allData }) => {\n  const classes = useStyles();\n  const [activeIndex, setActiveIndex] = useState(-1);\n  const dispatch = useDispatch();\n  const settings = {\n    dots: true,\n    infinite: false,\n    speed: 500,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    nextArrow: <SampleNextArrow />,\n    prevArrow: <SamplePrevArrow />,\n    responsive: [\n      {\n        breakpoint: 1024, // and below width: 800\n        settings: {\n          slidesToShow: 3,\n          slidesToScroll: 2,\n          infinite: false,\n          dots: true,\n        },\n      },\n      {\n        breakpoint: 768, // and below width: 800\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          infinite: false,\n          dots: true,\n        },\n      },\n      {\n        breakpoint: 600, // and below width: 500\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          initialSlide: 2,\n        },\n      },\n      {\n        breakpoint: 480, // 480 below width: 300\n        settings: {\n          // 320 below width: 270\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n    ],\n  };\n\n  const onSelected = (weather, index) => {\n    setActiveIndex(index);\n    dispatch(sortBarChartData(weather, allData))\n  };\n\n\n  return (\n    <div>\n      <div className=\"carousel-container\">\n        <Slider\n          style={{\n            paddingLeft: \"2%\",\n            paddingRight: \"2%\",\n          }}\n          {...settings}\n        >\n          {data?.slice(0, 5).map((weather, index) => (\n            <div\n              key={index}\n              onClick={() => {\n                onSelected(weather, index);\n              }}\n            >\n              <WeatherCard\n                temp={Math.round(weather.main.temp)}\n                date={moment(weather.dt_txt).format(\"MMM Do YY\")}\n                description={weather.weather[0].description}\n                icon={weather.weather[0].icon}\n                isCels={celsius}\n                customStyle={\n                  activeIndex === index ? classes.selectedRoot : classes.root\n                }\n              />\n            </div>\n          ))}\n        </Slider>\n      </div>\n    </div>\n  );\n};\n\nexport default CustomCarousel;\n","import React from \"react\";\nimport {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst CustomBarChart = ({ data }) => {\n  // const data = [\n  //   {\n  //     date: \"A\",\n  //     temp: 4000,\n  //     //pv: 2400,\n  //   },\n  //   {\n  //     date: \"B\",\n  //     temp: 3000,\n  //     //pv: 1398,\n  //   },\n  //   {\n  //     date: \"C\",\n  //     temp: 2000,\n  //     //pv: 9800,\n  //   },\n  //   {\n  //     date: \"D\",\n  //     temp: 2780,\n  //     //pv: 3908,\n  //   },\n  //   {\n  //     date: \"E\",\n  //     temp: 1890,\n  //     //pv: 4800,\n  //   },\n  //   {\n  //     date: \"F\",\n  //     temp: 2390,\n  //     //pv: 3800,\n  //   },\n  //   {\n  //     date: \"G\",\n  //     temp: 3490,\n  //     // pv: 4300,\n  //   },\n  // ];\n  return (\n    <ResponsiveContainer width=\"70%\" height={270}>\n      <BarChart data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" tick={{ fontSize: 16 }} />\n        {/* <YAxis /> */}\n        <Tooltip />\n        <Legend />\n        {/* <Bar dataKey=\"pv\" fill=\"#8884d8\" /> */}\n        <Bar dataKey=\"temp\" fill=\"#82ca9d\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default CustomBarChart;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\n\nconst useStyles = makeStyles({\n  root: {\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n  },\n  icon: {\n    borderRadius: '50%',\n    width: 16,\n    height: 16,\n    boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n    backgroundColor: '#f5f8fa',\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\n    '$root.Mui-focusVisible &': {\n      outline: '2px auto rgba(19,124,189,.6)',\n      outlineOffset: 2,\n    },\n    'input:hover ~ &': {\n      backgroundColor: '#ebf1f5',\n    },\n    'input:disabled ~ &': {\n      boxShadow: 'none',\n      background: 'rgba(206,217,224,.5)',\n    },\n  },\n  checkedIcon: {\n    backgroundColor: '#137cbd',\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\n    '&:before': {\n      display: 'block',\n      width: 16,\n      height: 16,\n      backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\n      content: '\"\"',\n    },\n    'input:hover ~ &': {\n      backgroundColor: '#106ba3',\n    },\n  },\n});\n\nconst StyledRadio = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Radio\n      className={classes.root}\n      disableRipple\n      color=\"default\"\n      checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\n      icon={<span className={classes.icon} />}\n      {...props}\n    />\n  );\n}\n \nexport default StyledRadio;","import { Button, withStyles } from \"@material-ui/core\";\nimport { blue } from '@material-ui/core/colors';\n\nconst SearchButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(blue[500]),\n    backgroundColor: blue[500],\n    '&:hover': {\n      backgroundColor: blue[700],\n    },\n    margin: 5\n  },\n}))(Button);\n\nexport default SearchButton;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  Button,\n  CircularProgress,\n  Typography,\n  Dialog,\n  DialogContent,\n  DialogActions,\n} from \"@material-ui/core\";\nimport { Container } from \"react-bootstrap\";\nimport CustomCarousel from \"./components/CustomCarousel\";\nimport CustomBarChart from \"./components/CustomBarChart\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getWeatherData, sortBarChartData } from \"./actions/weather\";\nimport { SET_CELSIUS } from \"./types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport StyledRadio from \"./components/StyledRadio\";\nimport SearchButton from \"./components/SearchButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"85%\",\n    },\n  },\n  text: {\n    margin: 5,\n  },\n}));\n\nconst App = () => {\n  const [value, setValue] = useState(\"farenheit\");\n  const [city, setCity] = useState(\"\");\n  const [openDialog, setOpenDialog] = useState(false);\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector((state) => state.loading);\n  const { weatherData, fiveDaysData, isCelsius, barChartData, weatherCity } =\n    useSelector((state) => state.weather);\n  const classes = useStyles();\n\n  // fetch weather data when the component mounts\n  useEffect(() => {\n    dispatch(getWeatherData());\n  }, []);\n\n  // set bar chart data to first date on the card.\n  useEffect(() => {\n    if (fiveDaysData != null) {\n      dispatch(sortBarChartData(fiveDaysData[0], weatherData));\n    }\n  }, [fiveDaysData]);\n\n  // toggle between celsius and farenheit si units\n  const handleChange = (event) => {\n    if (event.target.value == \"farenheit\") {\n      dispatch({\n        type: SET_CELSIUS,\n        payload: false,\n      });\n    } else if (event.target.value == \"celsius\") {\n      dispatch({\n        type: SET_CELSIUS,\n        payload: true,\n      });\n    }\n    setValue(event.target.value);\n    // console.log(weatherData);\n  };\n\n  const search = (e) => {\n    // e.preventDefault();\n    console.log(city);\n    dispatch(getWeatherData(city));\n    setOpenDialog(false);\n  };\n\n  return (\n    <div data-testid=\"root\" className=\"App\">\n      <Container className=\"App-container\">\n        {isLoading ? (\n          <CircularProgress data-testid=\"loader\" color=\"secondary\" />\n        ) : (\n          <>\n            {weatherData == null ? (\n              <Typography variant=\"h6\" className={classes.text}>\n                Oops! Please search for a valid location.\n              </Typography>\n            ) : (\n              <Typography variant=\"h6\" className={classes.text}>\n                Showing five(5) days weather data for {weatherCity}\n              </Typography>\n            )}\n            <SearchButton\n              onClick={() => setOpenDialog(true)}\n              variant=\"contained\"\n              color=\"primary\"\n              data-testid=\"search-btn\"\n            >\n              search location\n            </SearchButton>\n            {weatherData == null ? (\n              <></>\n            ) : (\n              <>\n                <FormControl component=\"fieldset\">\n                  <RadioGroup\n                    aria-label=\"gender\"\n                    name=\"gender1\"\n                    value={value}\n                    onChange={handleChange}\n                    style={{ flexDirection: \"row\", marginBottom: 70 }}\n                    data-testid=\"radio-group\"\n                  >\n                    <FormControlLabel\n                      value=\"farenheit\"\n                      control={<StyledRadio />}\n                      label=\"Farenheit\"\n                    />\n                    <FormControlLabel\n                      value=\"celsius\"\n                      control={<StyledRadio />}\n                      label=\"Celsius\"\n                    />\n                  </RadioGroup>\n                </FormControl>\n                <CustomCarousel\n                  data={fiveDaysData}\n                  celsius={isCelsius}\n                  allData={weatherData}\n                />\n                <Typography className={classes.text}>\n                  Click on card above to see details in barchart.\n                </Typography>\n                {barChartData == null ? (\n                  <></>\n                ) : (\n                  <CustomBarChart data={barChartData} />\n                )}{\" \"}\n              </>\n            )}\n\n            <Dialog\n              maxWidth=\"xs\"\n              fullWidth={true}\n              open={openDialog}\n              onClose={() => {\n                setOpenDialog(false);\n              }}\n            >\n              <DialogContent>\n                <form\n                  className={classes.root}\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                  }}\n                  noValidate\n                  autoComplete=\"off\"\n                >\n                  <TextField\n                    id=\"outlined-basic\"\n                    color=\"primary\"\n                    onChange={(e) => setCity(e.target.value)}\n                    label=\"Search location\"\n                    variant=\"outlined\"\n                  />\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <SearchButton\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={search}\n                >\n                  Go\n                </SearchButton>\n              </DialogActions>\n            </Dialog>\n          </>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  SET_BARCHART_DATA,\n  SET_CELSIUS,\n  SET_CITY,\n  SET_FIVE_DAYS_FORECAST,\n  SET_WEATHER_DATA,\n} from \"../types\";\n\nexport const initialState = {\n  weatherData: null,\n  fiveDaysData: null,\n  isCelsius: false,\n  barChartData: null,\n  weatherCity: \"\",\n};\n\nconst weatherReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case SET_WEATHER_DATA:\n      return {\n        ...state,\n        weatherData: payload,\n      };\n    case SET_FIVE_DAYS_FORECAST:\n      return {\n        ...state,\n        fiveDaysData: payload,\n      };\n    case SET_CELSIUS:\n      return {\n        ...state,\n        isCelsius: payload,\n      };\n    case SET_BARCHART_DATA:\n      return {\n        ...state,\n        barChartData: payload,\n      };\n    case SET_CITY:\n      return {\n        ...state,\n        weatherCity: payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default weatherReducer;\n","import { LOADING } from \"../types\";\n\nconst initialState = {\n  isLoading: false,\n};\n\nconst loadingReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case LOADING:\n      return {\n        ...state,\n        isLoading: payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import { combineReducers } from 'redux';\nimport weather from './weather';\nimport loading from './loading';\n\nexport default combineReducers({\n  weather,\n  loading\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from '../reducers';\n\nexport const middlewares = [thunk, logger];\n\nconst initialState = {};\n\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middlewares)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from \"redux\";\nimport { Provider } from 'react-redux';\n// import rootReducer from './reducers';\nimport store from './store'\n\n// const store = createStore(\n//   rootReducer,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}